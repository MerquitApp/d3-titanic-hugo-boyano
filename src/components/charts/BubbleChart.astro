---
import ChartLayout from "../../layouts/ChartLayout.astro";
import ChartLegend from "../ChartLegend.astro";

const legends = [
  {
    name: "1º",
    color: "var(--color-chart-primary)"
  },
  {
    name: "2º",
    color: "var(--color-chart-secondary)"
  },
  {
    name: "3º",
    color: "var(--color-chart-supporting-1)"
  }
];
---

<ChartLayout title="Clases">
  <div class="flex flex-col w-[350px] mx-auto">
    <svg class="bubble-chart h-[300px] w-full"> </svg>
    <ChartLegend legends={legends} />
  </div>
</ChartLayout>

<script>
  import * as d3 from "d3";
  import { DATA } from "../../constants";

  const svg = d3.select(".bubble-chart");
  const width = 350;
  const height = 300;

  svg.attr("viewBox", `0 0 ${width} ${height}`);

  const dataByClass = d3.group(
    DATA,
    (v) => v.Pclass,
    (d) => d.Survived
  );

  function getSurvivalPercentage(classData: any) {
    const totalPeopleCount = classData.get("0")?.length + classData.get("1")?.length;
    const survivedCount = classData.get("1")?.length;
    return (survivedCount / totalPeopleCount) * 100;
  }

  const survivalRates = [
    {
      class: "1º",
      value: getSurvivalPercentage(dataByClass.get("1")),
      color: "var(--color-chart-primary)"
    },
    {
      class: "2º",
      value: getSurvivalPercentage(dataByClass.get("2")),
      color: "var(--color-chart-secondary)"
    },
    {
      class: "3º",
      value: getSurvivalPercentage(dataByClass.get("3")),
      color: "var(--color-chart-supporting-1)"
    }
  ];

  const nodes = survivalRates.map((d, idx) => {
    const totalPeopleCount =
      dataByClass.get(`${idx + 1}`)!.get("1")!.length +
      dataByClass.get(`${idx + 1}`)!.get("0")!.length;

    const radiusScale = d3
      .scaleSqrt()
      .domain([0, totalPeopleCount])
      .range([10, 100]);

    return {
      ...d,
      radius: radiusScale(d.value),
      x: width / 2,
      y: height / 2
    };
  });

  const simulation = d3
    .forceSimulation(nodes)
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("collision", d3.forceCollide().radius((d: any) => d.radius))
    .force("x", d3.forceX(width / 2).strength(0.5))
    .force("y", d3.forceY(height / 2).strength(0.25))
    .on("tick", () => {
      circles.attr("cx", (d) => d.x).attr("cy", (d) => d.y);
      texts.attr("x", (d) => d.x + 5).attr("y", (d) => d.y + 7);
    });

  const circles = svg
    .selectAll("circle")
    .data(nodes)
    .enter()
    .append("circle")
    .attr("r", (d) => d.radius)
    .attr("fill", (d) => d.color);

  circles.call(
    // @ts-ignore
    d3.drag().on("start", dragstarted).on("drag", dragged).on("end", dragended)
  );

  const texts = svg
    .selectAll("text")
    .data(nodes)
    .enter()
    .append("text")
    .attr("text-anchor", "middle")
    .attr("font-size", "24px")
    .attr("font-weight", "bold")
    .attr("fill", "white")
    .style("pointer-events", "none")
    .text((d) => `${Math.round(d.value)}%`);

  function dragstarted(event: any) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    event.subject.fx = event.x;
    event.subject.fy = event.y;
  }

  function dragged(event: any) {
    event.subject.fx = event.x;
    event.subject.fy = event.y;
  }

  function dragended(event: any) {
    if (!event.active) simulation.alphaTarget(0);
    event.subject.fx = null;
    event.subject.fy = null;
  }
</script>
