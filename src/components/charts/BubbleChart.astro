---
import ChartLayout from "../../layouts/ChartLayout.astro";
---

<ChartLayout title="Clases">
  <div class="flex flex-col w-[350px] mx-auto">
    <svg class="bubble-chart h-[300px] w-full"> </svg>
    <div class="flex justify-between mt-4">
      <div class="flex items-center mr-4">
        <span class="w-3 h-3 bg-chart-primary rounded-full inline-block mr-2"
        ></span>
        <span class="opacity-50">1º</span>
      </div>
      <div class="flex items-center mr-4">
        <span class="w-3 h-3 bg-chart-secondary rounded-full inline-block mr-2"
        ></span>
        <span class="opacity-50">2º</span>
      </div>
      <div class="flex items-center">
        <span
          class="w-3 h-3 bg-chart-supporting-1 rounded-full inline-block mr-2"
        ></span>
        <span class="opacity-50">3º</span>
      </div>
    </div>
  </div>
</ChartLayout>

<script>
  import * as d3 from "d3";
  import { DATA } from "../../constants";

  const svg = d3.select(".bubble-chart");
  const width = 350;
  const height = 300;

  svg.attr("viewBox", `0 0 ${width} ${height}`);

  const dataByClass = d3.group(
    DATA,
    (v) => v.Pclass,
    (d) => d.Survived
  );

  let largestPercentage = 0;

  dataByClass.forEach((d, i) => {
    const survivedCount = d.get("1")?.length ?? 0;
    const percentage = (survivedCount / DATA.length) * 100;
    if (percentage > largestPercentage) {
      largestPercentage = percentage;
    }
  });

  const radiusScale = d3
    .scaleSqrt()
    .domain([0, largestPercentage])
    .range([10, 60]);

  function getSurvivalPercentage(classData: any) {
    const survivedCount = classData.get("1")?.length ?? 0;
    return (survivedCount / DATA.length) * 100;
  }

  const survivalRates = [
    {
      class: "1º",
      value: getSurvivalPercentage(dataByClass.get("1")),
      color: "var(--color-chart-primary)"
    },
    {
      class: "2º",
      value: getSurvivalPercentage(dataByClass.get("2")),
      color: "var(--color-chart-secondary)"
    },
    {
      class: "3º",
      value: getSurvivalPercentage(dataByClass.get("3")),
      color: "var(--color-chart-supporting-1)"
    }
  ];

  const nodes = survivalRates.map((d) => ({
    ...d,
    radius: radiusScale(d.value),
    x: width / 2,
    y: height / 2
  }));

  const simulation = d3
    .forceSimulation(nodes)
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("collision", d3.forceCollide().radius(50))
    .force("x", d3.forceX(width / 2).strength(0.2))
    .force("y", d3.forceY(height / 2).strength(0.1))
    .on("tick", () => {
      circles.attr("cx", (d) => d.x).attr("cy", (d) => d.y);
      texts.attr("x", (d) => d.x + 5).attr("y", (d) => d.y + 7);
    });

  const circles = svg
    .selectAll("circle")
    .data(nodes)
    .enter()
    .append("circle")
    .attr("r", (d) => d.radius)
    .attr("fill", (d) => d.color);
    
  circles.call(
    // @ts-ignore
    d3.drag().on("start", dragstarted).on("drag", dragged).on("end", dragended)
  );

  const texts = svg
    .selectAll("text")
    .data(nodes)
    .enter()
    .append("text")
    .attr("text-anchor", "middle")
    .attr("font-size", "24px")
    .attr("font-weight", "bold")
    .attr("fill", "white")
    .text((d) => `${Math.round(d.value)}%`);

  function dragstarted(event: any) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    event.subject.fx = event.x;
    event.subject.fy = event.y;
  }

  function dragged(event: any) {
    event.subject.fx = event.x;
    event.subject.fy = event.y;
  }

  function dragended(event: any) {
    if (!event.active) simulation.alphaTarget(0);
    event.subject.fx = null;
    event.subject.fy = null;
  }
</script>
